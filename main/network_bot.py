import telebot
from telebot import types
import requests
import socket
import os
import logging
from dotenv import load_dotenv

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---


load_dotenv()
TOKEN = os.getenv("NETWORK_BOT_TOKEN")  # –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ .env —Ñ–∞–π–ª–∞
CONTENT_DIR = "content"  # –ü–∞–ø–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –±–æ—Ç–∞
BOT_PHOTO = "network_bot_photo.png"  # –ò–º—è —Ñ–∞–π–ª–∞ —Å —Ñ–æ—Ç–æ –±–æ—Ç–∞
REQUEST_TIMEOUT = 5  # –¢–∞–π–º–∞—É—Ç –¥–ª—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
SOCKET_TIMEOUT = 1  # –¢–∞–π–º–∞—É—Ç –¥–ª—è —Å–æ–∫–µ—Ç–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
DNS_IP = "8.8.8.8"  # Google Public DNS
DNS_PORT = 53  # DNS –ø–æ—Ä—Ç

if not TOKEN:
    raise ValueError(
        "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è NETWORK_BOT_TOKEN. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ –Ω–µ–≥–æ NETWORK_BOT_TOKEN."
    )

bot = telebot.TeleBot(TOKEN)

# --- –§—É–Ω–∫—Ü–∏–∏-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---


def get_main_keyboard():
    """
    –°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±–æ—Ç–∞

    Args:
        None

    Returns:
        types.ReplyKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    """
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [types.KeyboardButton("üåê Google"), types.KeyboardButton("üîç DNS"), types.KeyboardButton("‚ùì –ü–æ–º–æ—â—å")]
    markup.add(*buttons)
    return markup


@bot.message_handler(commands=["start"])
def start_command(message):
    """
    –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–∫–∞–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–æ–º–∞–Ω–¥–∞–º–∏.

    Args:
        message (telebot.types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        None
    """
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.username}: {message.text}")

    markup = get_main_keyboard()

    try:
        script_dir = os.path.dirname(os.path.abspath(__file__))
        content_dir = os.path.join(script_dir, CONTENT_DIR)

        if not os.path.exists(content_dir):
            os.makedirs(content_dir)
            logging.warning(f"–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ {content_dir}")

        photo_path = os.path.join(content_dir, BOT_PHOTO)
        with open(photo_path, "rb") as file:
            bot.send_photo(message.chat.id, file)
    except FileNotFoundError:
        logging.warning(f"–§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –ø—É—Ç–∏: {photo_path}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")

    bot.send_message(
        message.chat.id,
        f"<b>–ü—Ä–∏–≤–µ—Ç</b>, <em>{message.from_user.first_name}</em>, <b>—Ç–µ–±—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç SocketSentryBot!</b>\n"
        "–Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–µ—Ç–µ–≤–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏. –í–≤–µ–¥–∏ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.",
        parse_mode="html",
        reply_markup=markup,
    )


@bot.message_handler(commands=["check"])
def check_command(message):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤–µ–±-—Å–∞–π—Ç–∞.

    Args:
        message (telebot.types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ –∫–æ–º–∞–Ω–¥—É –∏ URL —Å–∞–π—Ç–∞

    Returns:
        None
    """
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.username}: {message.text}")

    markup = get_main_keyboard()
    response_message = ""

    try:
        url = message.text.split()[1]
        if not url.startswith("http"):
            url = "http://" + url

        bot.reply_to(message, f"–ü—Ä–æ–≤–µ—Ä—è—é —Å–∞–π—Ç {url}...")
        response = requests.get(url, timeout=REQUEST_TIMEOUT)

        if response.status_code == 200:
            response_message = f"‚úÖ –°–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω. –°—Ç–∞—Ç—É—Å: {response.status_code} OK"
        else:
            response_message = f"‚ö†Ô∏è –°–∞–π—Ç –æ—Ç–≤–µ—Ç–∏–ª. –°—Ç–∞—Ç—É—Å: {response.status_code}"

    except IndexError:
        response_message = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å —Å–∞–π—Ç–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä: /check google.com"
    except requests.ConnectionError:
        url_to_report = message.text.split()[1] if len(message.text.split()) > 1 else "—É–∫–∞–∑–∞–Ω–Ω—ã–π —Å–∞–π—Ç"
        response_message = f"‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–∞–π—Ç—É {url_to_report}."
    except Exception as e:
        response_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}"

    bot.send_message(message.chat.id, response_message, reply_markup=markup)


def check_port(ip, port):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–∫—Ä—ã—Ç –ª–∏ TCP-–ø–æ—Ä—Ç –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º IP-–∞–¥—Ä–µ—Å–µ.

    Args:
        ip (str): IP-–∞–¥—Ä–µ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        port (int): –ù–æ–º–µ—Ä –ø–æ—Ä—Ç–∞

    Returns:
        bool: True –µ—Å–ª–∏ –ø–æ—Ä—Ç –æ—Ç–∫—Ä—ã—Ç, False –µ—Å–ª–∏ –∑–∞–∫—Ä—ã—Ç"""
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
        sock.settimeout(SOCKET_TIMEOUT)
        result = sock.connect_ex((ip, port))
        return result == 0  # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –ø–æ—Ä—Ç –æ—Ç–∫—Ä—ã—Ç


@bot.message_handler(commands=["portscan"])
def portscan_command(message):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º IP-–∞–¥—Ä–µ—Å–µ.

    Args:
        message (telebot.types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ –∫–æ–º–∞–Ω–¥—É, IP –∏ –ø–æ—Ä—Ç

    Returns:
        None
    """
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.username}: {message.text}")

    markup = get_main_keyboard()
    response_message = ""

    try:
        parts = message.text.split()
        ip = parts[1]
        port = int(parts[2])

        bot.reply_to(message, f"–°–∫–∞–Ω–∏—Ä—É—é –ø–æ—Ä—Ç {port} –Ω–∞ {ip}...")

        if check_port(ip, port):
            response_message = f"‚úÖ –ü–æ—Ä—Ç {port} –Ω–∞ {ip} –æ—Ç–∫—Ä—ã—Ç."
        else:
            response_message = f"‚ùå –ü–æ—Ä—Ç {port} –Ω–∞ {ip} –∑–∞–∫—Ä—ã—Ç."

    except (IndexError, ValueError):
        response_message = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ IP-–∞–¥—Ä–µ—Å –∏ –ø–æ—Ä—Ç. –ü—Ä–∏–º–µ—Ä: /portscan 8.8.8.8 53"
    except Exception as e:
        response_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}"

    bot.send_message(message.chat.id, response_message, reply_markup=markup)


@bot.message_handler(commands=["help"])
def help_command(message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.

    Args:
        message (telebot.types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ –∫–æ–º–∞–Ω–¥—É

    Returns:
        None
    """
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.username}: {message.text}")

    message_info = f"""
<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>

/start - –ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/check &lt;website&gt; - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å HTTP-—Å—Ç–∞—Ç—É—Å —Å–∞–π—Ç–∞
/portscan &lt;ip-–∞–¥—Ä–µ—Å&gt; &lt;–ø–æ—Ä—Ç&gt; - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å TCP-–ø–æ—Ä—Ç
    """
    bot.send_message(message.chat.id, message_info.strip(), parse_mode="html")


@bot.message_handler(content_types=["text"])
def handle_text(message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

    Args:
        message (telebot.types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        None
    """
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.username}: {message.text}")

    if message.text == "üåê Google":
        message.text = "/check google.com"
        check_command(message)
    elif message.text == "üîç DNS":
        message.text = f"/portscan {DNS_IP} {DNS_PORT}"
        portscan_command(message)
    elif message.text == "‚ùì –ü–æ–º–æ—â—å":
        help_command(message)
    else:
        bot.reply_to(message, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")


# --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∑–∞–ø—É—Å–∫–∞ ---


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
    logging.info("–ë–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Ç—è–º–∏ –∑–∞–ø—É—â–µ–Ω...")
    try:
        bot.infinity_polling()
    except Exception as e:
        logging.error(f"–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏: {e}")
    except KeyboardInterrupt:
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    finally:
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
